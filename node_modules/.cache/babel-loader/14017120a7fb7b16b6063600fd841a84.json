{"ast":null,"code":"// let productState = {\n//   products: [],\n//   listOfProducts: [],\n// };\n// const ProductReducer = (state = productState, action) => {\n//   let { type, payload } = action;\n//   switch (type) {\n//     case \"GET\":\n//       return {\n//         product: payload,\n//         listOfProducts: [],\n//       };\n//     case \"PUT\":\n//       let newList = state.listOfProducts.map((product) => {\n//         if (payload.name === product.name) {\n//           if (payload.quantity > 0) {\n//             product.quantity--;\n//             product.cartCount++;\n//           }\n//         }\n//         return product;\n//       });\n//       return { ...state, listOfProducts: newList };\n//     case \"ACTIVE\":\n//       state.listOfProducts = [];\n//       state.products.forEach(product => {\n//         if (product.category === payload) {\n//           state.listOfProducts.push(product);\n//         }\n//       })\n//       // let updateInventory = state.listOfProducts.map((product) => {\n//       //   if (payload.name === product.name) {\n//       //     product.quantity = product.quantity + product.count;\n//       //   }\n//       //   return product;\n//       // });\n//       return { ...state };\n//     // return {\n//     //   products: state.products,\n//     //   listOfProducts: state.listOfProducts\n//     // };\n//     case 'PUT_REMOVE':\n//       let updateInventory = state.listOfProducts.map(product => {\n//         if (payload.name === product.name) {\n//           product.quantity = product.cartCount + product.updateInventory;\n//           product.cartCount = 0;\n//         }\n//         return product;\n//       })\n//       return { ...state, listOfProducts: updateInventory }\n//     default:\n//       return state;\n//   }\n// };\n// export const addToMyCart = (payload) => {\n//   return {\n//     type: \"addToMyCart\",\n//     payload: payload,\n//   };\n// };\n// export default ProductReducer;\nlet initialProductState = {\n  products: [],\n  productsList: []\n};\n\nconst ProductReducer = (state = initialProductState, action) => {\n  let {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case \"GET\":\n      return {\n        products: payload,\n        productsList: []\n      };\n\n    case \"PUT\":\n      let newList = state.productsList.map(product => {\n        if (payload.id === product.id) {\n          product.inventory--;\n          product.cartCount++;\n        }\n\n        return product;\n      });\n      return { ...state,\n        productsList: newList\n      };\n\n    case \"ACTIVE\":\n      state.productsList = [];\n      state.products.forEach(product => {\n        if (product.category === payload) {\n          state.productsList.push(product);\n        }\n      });\n      return { ...state\n      };\n\n    case \"PUT_REMOVE\":\n      let updateInventory = state.productsList.map(product => {\n        if (payload.id === product.id) {\n          product.inventory = product.cartCount + product.inventory;\n          product.cartCount = 0;\n        }\n\n        return product;\n      });\n      return { ...state,\n        productsList: updateInventory\n      };\n\n    default:\n      return state;\n  }\n};\n\n_c = ProductReducer;\nexport default ProductReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductReducer\");","map":{"version":3,"sources":["/home/wafaa/storefront/src/store/ProductsStore.js"],"names":["initialProductState","products","productsList","ProductReducer","state","action","type","payload","newList","map","product","id","inventory","cartCount","forEach","category","push","updateInventory"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,IAAIA,mBAAmB,GAAG;AACxBC,EAAAA,QAAQ,EAAE,EADc;AAExBC,EAAAA,YAAY,EAAE;AAFU,CAA1B;;AAKA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGJ,mBAAT,EAA8BK,MAA9B,KAAyC;AAC9D,MAAI;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAAxB;;AAEA,UAAQC,IAAR;AACE,SAAK,KAAL;AACE,aAAO;AACLL,QAAAA,QAAQ,EAAEM,OADL;AAELL,QAAAA,YAAY,EAAE;AAFT,OAAP;;AAKF,SAAK,KAAL;AACE,UAAIM,OAAO,GAAGJ,KAAK,CAACF,YAAN,CAAmBO,GAAnB,CAAwBC,OAAD,IAAa;AAChD,YAAIH,OAAO,CAACI,EAAR,KAAeD,OAAO,CAACC,EAA3B,EAA+B;AAC7BD,UAAAA,OAAO,CAACE,SAAR;AACAF,UAAAA,OAAO,CAACG,SAAR;AACD;;AACD,eAAOH,OAAP;AACD,OANa,CAAd;AAQA,aAAO,EAAE,GAAGN,KAAL;AAAYF,QAAAA,YAAY,EAAEM;AAA1B,OAAP;;AAEF,SAAK,QAAL;AACEJ,MAAAA,KAAK,CAACF,YAAN,GAAqB,EAArB;AACAE,MAAAA,KAAK,CAACH,QAAN,CAAea,OAAf,CAAwBJ,OAAD,IAAa;AAClC,YAAIA,OAAO,CAACK,QAAR,KAAqBR,OAAzB,EAAkC;AAChCH,UAAAA,KAAK,CAACF,YAAN,CAAmBc,IAAnB,CAAwBN,OAAxB;AACD;AACF,OAJD;AAKA,aAAO,EAAE,GAAGN;AAAL,OAAP;;AAEF,SAAK,YAAL;AACE,UAAIa,eAAe,GAAGb,KAAK,CAACF,YAAN,CAAmBO,GAAnB,CAAwBC,OAAD,IAAa;AACxD,YAAIH,OAAO,CAACI,EAAR,KAAeD,OAAO,CAACC,EAA3B,EAA+B;AAC7BD,UAAAA,OAAO,CAACE,SAAR,GAAoBF,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACE,SAAhD;AACAF,UAAAA,OAAO,CAACG,SAAR,GAAoB,CAApB;AACD;;AACD,eAAOH,OAAP;AACD,OANqB,CAAtB;AAOA,aAAO,EAAE,GAAGN,KAAL;AAAYF,QAAAA,YAAY,EAAEe;AAA1B,OAAP;;AAEF;AACE,aAAOb,KAAP;AAtCJ;AAwCD,CA3CD;;KAAMD,c;AA6CN,eAAeA,cAAf","sourcesContent":["// let productState = {\n//   products: [],\n//   listOfProducts: [],\n// };\n\n// const ProductReducer = (state = productState, action) => {\n//   let { type, payload } = action;\n//   switch (type) {\n//     case \"GET\":\n//       return {\n//         product: payload,\n//         listOfProducts: [],\n//       };\n\n\n//     case \"PUT\":\n//       let newList = state.listOfProducts.map((product) => {\n//         if (payload.name === product.name) {\n//           if (payload.quantity > 0) {\n//             product.quantity--;\n//             product.cartCount++;\n//           }\n//         }\n//         return product;\n//       });\n\n//       return { ...state, listOfProducts: newList };\n\n\n//     case \"ACTIVE\":\n//       state.listOfProducts = [];\n//       state.products.forEach(product => {\n//         if (product.category === payload) {\n//           state.listOfProducts.push(product);\n//         }\n//       })\n//       // let updateInventory = state.listOfProducts.map((product) => {\n//       //   if (payload.name === product.name) {\n//       //     product.quantity = product.quantity + product.count;\n//       //   }\n//       //   return product;\n//       // });\n\n//       return { ...state };\n\n\n//     // return {\n//     //   products: state.products,\n//     //   listOfProducts: state.listOfProducts\n//     // };\n\n//     case 'PUT_REMOVE':\n//       let updateInventory = state.listOfProducts.map(product => {\n//         if (payload.name === product.name) {\n//           product.quantity = product.cartCount + product.updateInventory;\n//           product.cartCount = 0;\n//         }\n//         return product;\n//       })\n\n//       return { ...state, listOfProducts: updateInventory }\n\n//     default:\n//       return state;\n//   }\n// };\n\n// export const addToMyCart = (payload) => {\n//   return {\n//     type: \"addToMyCart\",\n//     payload: payload,\n//   };\n// };\n\n// export default ProductReducer;\n\nlet initialProductState = {\n  products: [],\n  productsList: [],\n};\n\nconst ProductReducer = (state = initialProductState, action) => {\n  let { type, payload } = action;\n\n  switch (type) {\n    case \"GET\":\n      return {\n        products: payload,\n        productsList: [],\n      };\n\n    case \"PUT\":\n      let newList = state.productsList.map((product) => {\n        if (payload.id === product.id) {\n          product.inventory--;\n          product.cartCount++;\n        }\n        return product;\n      });\n\n      return { ...state, productsList: newList };\n\n    case \"ACTIVE\":\n      state.productsList = [];\n      state.products.forEach((product) => {\n        if (product.category === payload) {\n          state.productsList.push(product);\n        }\n      });\n      return { ...state };\n\n    case \"PUT_REMOVE\":\n      let updateInventory = state.productsList.map((product) => {\n        if (payload.id === product.id) {\n          product.inventory = product.cartCount + product.inventory;\n          product.cartCount = 0;\n        }\n        return product;\n      });\n      return { ...state, productsList: updateInventory };\n\n    default:\n      return state;\n  }\n};\n\nexport default ProductReducer;\n"]},"metadata":{},"sourceType":"module"}