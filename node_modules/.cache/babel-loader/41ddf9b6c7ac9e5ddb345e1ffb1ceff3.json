{"ast":null,"code":"let initialState = {\n  categories: [],\n  activeCategory: \"none\"\n};\nexport default ((state = initialState, action) => {\n  let {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case \"GET\":\n      let uniqueCat = [];\n\n      for (let category of payload) {\n        if (!uniqueCat.includes(category.category)) {\n          uniqueCat.push(category.category);\n        }\n      }\n\n      return {\n        categories: [...uniqueCat],\n        activeCategory: state.activeCategory\n      };\n\n    case \"ACTIVE\":\n      return {\n        categories: state.categories,\n        activeCategory: payload.normalizedName\n      };\n\n    default:\n      return state;\n  }\n});\nexport const activeCat = category => {\n  return {\n    type: \"ACTIVE\",\n    payload: category\n  };\n};","map":{"version":3,"sources":["/home/wafaa/storefront/src/store/CategoryStore.js"],"names":["initialState","categories","activeCategory","state","action","type","payload","uniqueCat","category","includes","push","normalizedName","activeCat"],"mappings":"AACA,IAAIA,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAE,EADK;AAEjBC,EAAAA,cAAc,EAAE;AAFC,CAAnB;AAKA,gBAAe,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AAC/C,MAAI;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAAxB;;AAEA,UAAQC,IAAR;AACE,SAAK,KAAL;AACE,UAAIE,SAAS,GAAG,EAAhB;;AAEA,WAAK,IAAIC,QAAT,IAAqBF,OAArB,EAA8B;AAC5B,YAAI,CAACC,SAAS,CAACE,QAAV,CAAmBD,QAAQ,CAACA,QAA5B,CAAL,EAA4C;AAC1CD,UAAAA,SAAS,CAACG,IAAV,CAAeF,QAAQ,CAACA,QAAxB;AACD;AACF;;AACD,aAAO;AACLP,QAAAA,UAAU,EAAE,CAAC,GAAGM,SAAJ,CADP;AAELL,QAAAA,cAAc,EAAEC,KAAK,CAACD;AAFjB,OAAP;;AAIF,SAAK,QAAL;AACE,aAAO;AACLD,QAAAA,UAAU,EAAEE,KAAK,CAACF,UADb;AAELC,QAAAA,cAAc,EAAEI,OAAO,CAACK;AAFnB,OAAP;;AAKF;AACE,aAAOR,KAAP;AApBJ;AAsBD,CAzBD;AA2BA,OAAO,MAAMS,SAAS,GAAIJ,QAAD,IAAc;AACrC,SAAO;AACLH,IAAAA,IAAI,EAAE,QADD;AAELC,IAAAA,OAAO,EAAEE;AAFJ,GAAP;AAID,CALM","sourcesContent":["\nlet initialState = {\n  categories: [],\n  activeCategory: \"none\",\n};\n\nexport default (state = initialState, action) => {\n  let { type, payload } = action;\n\n  switch (type) {\n    case \"GET\":\n      let uniqueCat = [];\n\n      for (let category of payload) {\n        if (!uniqueCat.includes(category.category)) {\n          uniqueCat.push(category.category);\n        }\n      }\n      return {\n        categories: [...uniqueCat],\n        activeCategory: state.activeCategory,\n      };\n    case \"ACTIVE\":\n      return {\n        categories: state.categories,\n        activeCategory: payload.normalizedName,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const activeCat = (category) => {\n  return {\n    type: \"ACTIVE\",\n    payload: category,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}