{"ast":null,"code":"let productState = {\n  products: [],\n  listOfProducts: []\n};\n\nconst ProductReducer = (state = productState, action) => {\n  let {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case \"GET\":\n      return {\n        product: payload,\n        listOfProducts: []\n      };\n\n    case \"PUT\":\n      let newList = state.listOfProducts.map(product => {\n        if (payload.name === product.name) {\n          if (payload.quantity > 0) {\n            product.quantity--;\n            product.cartCount++;\n          }\n        }\n\n        return product;\n      });\n      return { ...state,\n        listOfProducts: newList\n      };\n\n    case \"ACTIVE\":\n      state.listOfProducts = [];\n      state.products.forEach(product => {\n        if (product.category === payload) {\n          sta;\n        }\n      });\n      let updateInventory = state.listOfProducts.map(product => {\n        if (payload.name === product.name) {\n          product.quantity = product.quantity + product.count;\n        }\n\n        return product;\n      });\n      return { ...state,\n        listOfProducts: updateInventory\n      };\n    // return {\n    //   products: state.products,\n    //   listOfProducts: state.listOfProducts\n    // };\n\n    default:\n      return state;\n  }\n};\n\n_c = ProductReducer;\nexport const addToMyCart = payload => {\n  return {\n    type: \"addToMyCart\",\n    payload: payload\n  };\n};\nexport default ProductReducer; // let initialProductState = {\n//   products: [],\n//   productsList: [],\n// };\n// const ProductReducer = (state = initialProductState, action) => {\n//   let { type, payload } = action;\n//   switch (type) {\n//     case \"GET\":\n//       return {\n//         products: payload,\n//         productsList: [],\n//       };\n//     case \"PUT\":\n//       let newList = state.productsList.map((product) => {\n//         if (payload._id === product._id) {\n//           product.inventoryCount--;\n//           product.cartCount++;\n//         }\n//         return product;\n//       });\n//       return { ...state, productsList: newList };\n//     case \"ACTIVE\":\n//       state.productsList = [];\n//       state.products.forEach((product) => {\n//         if (product.category === payload) {\n//           state.productsList.push(product);\n//         }\n//       });\n//       return { ...state };\n//     case \"PUT_REMOVE\":\n//       let updateInventory = state.productsList.map((product) => {\n//         if (payload._id === product._id) {\n//           product.inventoryCount = product.cartCount + product.inventoryCount;\n//           product.cartCount = 0;\n//         }\n//         return product;\n//       });\n//       return { ...state, productsList: updateInventory };\n//     default:\n//       return state;\n//   }\n// };\n// export default ProductReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductReducer\");","map":{"version":3,"sources":["/home/wafaa/storefront/src/store/ProductsStore.js"],"names":["productState","products","listOfProducts","ProductReducer","state","action","type","payload","product","newList","map","name","quantity","cartCount","forEach","category","sta","updateInventory","count","addToMyCart"],"mappings":"AAAA,IAAIA,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE,EADO;AAEjBC,EAAAA,cAAc,EAAE;AAFC,CAAnB;;AAKA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AACvD,MAAI;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAAxB;;AACA,UAAQC,IAAR;AACE,SAAK,KAAL;AACE,aAAO;AACLE,QAAAA,OAAO,EAAED,OADJ;AAELL,QAAAA,cAAc,EAAE;AAFX,OAAP;;AAMF,SAAK,KAAL;AACE,UAAIO,OAAO,GAAGL,KAAK,CAACF,cAAN,CAAqBQ,GAArB,CAA0BF,OAAD,IAAa;AAClD,YAAID,OAAO,CAACI,IAAR,KAAiBH,OAAO,CAACG,IAA7B,EAAmC;AACjC,cAAIJ,OAAO,CAACK,QAAR,GAAmB,CAAvB,EAA0B;AACxBJ,YAAAA,OAAO,CAACI,QAAR;AACAJ,YAAAA,OAAO,CAACK,SAAR;AACD;AACF;;AACD,eAAOL,OAAP;AACD,OARa,CAAd;AAUA,aAAO,EAAE,GAAGJ,KAAL;AAAYF,QAAAA,cAAc,EAAEO;AAA5B,OAAP;;AAGF,SAAK,QAAL;AACEL,MAAAA,KAAK,CAACF,cAAN,GAAuB,EAAvB;AACAE,MAAAA,KAAK,CAACH,QAAN,CAAea,OAAf,CAAwBN,OAAO,IAAI;AACjC,YAAIA,OAAO,CAACO,QAAR,KAAqBR,OAAzB,EAAiC;AAC/BS,UAAAA,GAAG;AACJ;AACF,OAJD;AAKA,UAAIC,eAAe,GAAGb,KAAK,CAACF,cAAN,CAAqBQ,GAArB,CAA0BF,OAAD,IAAa;AAC1D,YAAID,OAAO,CAACI,IAAR,KAAiBH,OAAO,CAACG,IAA7B,EAAmC;AACjCH,UAAAA,OAAO,CAACI,QAAR,GAAmBJ,OAAO,CAACI,QAAR,GAAmBJ,OAAO,CAACU,KAA9C;AACD;;AACD,eAAOV,OAAP;AACD,OALqB,CAAtB;AAOA,aAAO,EAAE,GAAGJ,KAAL;AAAYF,QAAAA,cAAc,EAAEe;AAA5B,OAAP;AAGF;AACA;AACA;AACA;;AAEA;AACE,aAAOb,KAAP;AA7CJ;AA+CD,CAjDD;;KAAMD,c;AAmDN,OAAO,MAAMgB,WAAW,GAAIZ,OAAD,IAAa;AACtC,SAAO;AACLD,IAAAA,IAAI,EAAE,aADD;AAELC,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALM;AAOP,eAAeJ,cAAf,C,CAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA","sourcesContent":["let productState = {\n  products: [],\n  listOfProducts: [],\n};\n\nconst ProductReducer = (state = productState, action) => {\n  let { type, payload } = action;\n  switch (type) {\n    case \"GET\":\n      return { \n        product: payload,\n        listOfProducts: [],\n      };\n\n\n    case \"PUT\":\n      let newList = state.listOfProducts.map((product) => {\n        if (payload.name === product.name) {\n          if (payload.quantity > 0) {\n            product.quantity--;\n            product.cartCount++;\n          }\n        }\n        return product;\n      });\n\n      return { ...state, listOfProducts: newList };\n\n\n    case \"ACTIVE\":\n      state.listOfProducts = [];\n      state.products.forEach( product => {\n        if (product.category === payload){\n          sta\n        }\n      })\n      let updateInventory = state.listOfProducts.map((product) => {\n        if (payload.name === product.name) {\n          product.quantity = product.quantity + product.count;\n        }\n        return product;\n      });\n\n      return { ...state, listOfProducts: updateInventory };\n\n\n    // return {\n    //   products: state.products,\n    //   listOfProducts: state.listOfProducts\n    // };\n\n    default:\n      return state;\n  }\n};\n\nexport const addToMyCart = (payload) => {\n  return {\n    type: \"addToMyCart\",\n    payload: payload,\n  };\n};\n\nexport default ProductReducer;\n\n\n// let initialProductState = {\n//   products: [],\n//   productsList: [],\n// };\n\n// const ProductReducer = (state = initialProductState, action) => {\n//   let { type, payload } = action;\n\n//   switch (type) {\n//     case \"GET\":\n//       return {\n//         products: payload,\n//         productsList: [],\n//       };\n\n//     case \"PUT\":\n//       let newList = state.productsList.map((product) => {\n//         if (payload._id === product._id) {\n//           product.inventoryCount--;\n//           product.cartCount++;\n//         }\n//         return product;\n//       });\n\n//       return { ...state, productsList: newList };\n\n//     case \"ACTIVE\":\n//       state.productsList = [];\n//       state.products.forEach((product) => {\n//         if (product.category === payload) {\n//           state.productsList.push(product);\n//         }\n//       });\n//       return { ...state };\n\n//     case \"PUT_REMOVE\":\n//       let updateInventory = state.productsList.map((product) => {\n//         if (payload._id === product._id) {\n//           product.inventoryCount = product.cartCount + product.inventoryCount;\n//           product.cartCount = 0;\n//         }\n//         return product;\n//       });\n//       return { ...state, productsList: updateInventory };\n\n//     default:\n//       return state;\n//   }\n// };\n\n// export default ProductReducer;\n"]},"metadata":{},"sourceType":"module"}