{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport superagent from \"superagent\";\nconst myApi = \"https://api-server-0.herokuapp.com/products\";\nconst CategorySlice = createSlice({\n  name: \"Category\",\n  initialState: {\n    categories: [],\n    activeCategory: \"none\",\n    products: [],\n    productsList: [],\n    details: [],\n    cart: []\n  },\n  reducers: {\n    GET(state, action) {\n      for (let category of action.payload) {\n        if (!state.categories.includes(category.category)) {\n          state.categories.push(category.category);\n        }\n      }\n\n      state.products = [];\n      state.products.push(...action.payload);\n    },\n\n    ACTIVE(state, action) {\n      state.activeCategory = `${action.payload}`;\n      let myproducts = [];\n      state.products.forEach(product => {\n        if (product.category === action.payload) {\n          myproducts.push(product);\n        }\n      });\n      state.productsList = myproducts;\n    },\n\n    PUT(state, action) {\n      state.cart.push(action.payload);\n      state.productsList.forEach(prod => {\n        if (action.payload._id === prod._id) {\n          prod.inventory--;\n          prod.cartCount++;\n        }\n      });\n    },\n\n    PUT_REMOVE(state, action) {\n      state.productsList.forEach(prod => {\n        if (action.payload._id === prod._id) {\n          prod.inventory = prod.cartCount + prod.inventory;\n          prod.cartCount = 0;\n        }\n      });\n      let newCart = state.cart.filter(it => {\n        return it.item !== action.payload.name;\n      });\n      state.cart = [...newCart];\n    },\n\n    details(state, action) {\n      let targetedProduct = state.productsList.find(item => {\n        return item._id === action.payload;\n      });\n      state.details = [];\n      state.details.push(targetedProduct);\n    }\n\n  }\n});\nexport const updateRemoteDataAfterDeleteFromCart = (id, inventory, cartCount) => dispatch => {\n  superagent.put(`${myApi}/${id}`).send({\n    inventory: cartCount + inventory,\n    cartCount: 0\n  }).then(res => {\n    dispatch(PUT_REMOVE(res.body));\n  });\n};\nexport const updateRemoteData = it => dispatch => {\n  superagent.put(`${myApi}/${it._id}`).send({\n    inventory: it.inventory - 1,\n    cartCount: it.cartCount + 1\n  }).then(res => {\n    dispatch(PUT(res.body));\n  });\n};\nexport const getRemoteData = () => dispatch => {\n  superagent.get(myApi).then(res => {\n    dispatch(GET(res.body));\n  });\n};\nexport default CategorySlice.reducer;\nexport const {\n  GET,\n  ACTIVE,\n  PUT,\n  PUT_REMOVE,\n  details\n} = CategorySlice.actions;","map":{"version":3,"sources":["/home/wafaa/storefront/src/store/CategoryStore.js"],"names":["createSlice","superagent","myApi","CategorySlice","name","initialState","categories","activeCategory","products","productsList","details","cart","reducers","GET","state","action","category","payload","includes","push","ACTIVE","myproducts","forEach","product","PUT","prod","_id","inventory","cartCount","PUT_REMOVE","newCart","filter","it","item","targetedProduct","find","updateRemoteDataAfterDeleteFromCart","id","dispatch","put","send","then","res","body","updateRemoteData","getRemoteData","get","reducer","actions"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport superagent from \"superagent\";\nconst myApi = \"https://api-server-0.herokuapp.com/products\";\n\nconst CategorySlice = createSlice({\n  name: \"Category\",\n  initialState: {\n    categories: [],\n    activeCategory: \"none\",\n    products: [],\n    productsList: [],\n    details: [],\n    cart: [],\n  },\n  reducers: {\n    GET(state, action) {\n      for (let category of action.payload) {\n        if (!state.categories.includes(category.category)) {\n          state.categories.push(category.category);\n        }\n      }\n\n      state.products = [];\n      state.products.push(...action.payload);\n    },\n\n    ACTIVE(state, action) {\n      state.activeCategory = `${action.payload}`;\n      let myproducts = [];\n      state.products.forEach((product) => {\n        if (product.category === action.payload) {\n          myproducts.push(product);\n        }\n      });\n      state.productsList = myproducts;\n    },\n\n    PUT(state, action) {\n      state.cart.push(action.payload);\n\n      state.productsList.forEach((prod) => {\n        if (action.payload._id === prod._id) {\n          prod.inventory--;\n          prod.cartCount++;\n        }\n      });\n    },\n\n    PUT_REMOVE(state, action) {\n      state.productsList.forEach((prod) => {\n        if (action.payload._id === prod._id) {\n          prod.inventory = prod.cartCount + prod.inventory;\n          prod.cartCount = 0;\n        }\n      });\n      let newCart = state.cart.filter((it) => {\n        return it.item !== action.payload.name;\n      });\n      state.cart = [...newCart];\n    },\n\n    details(state, action) {\n      let targetedProduct = state.productsList.find((item) => {\n        return item._id === action.payload;\n      });\n      state.details = [];\n      state.details.push(targetedProduct);\n    },\n  },\n});\n\nexport const updateRemoteDataAfterDeleteFromCart =\n  (id, inventory, cartCount) => (dispatch) => {\n    superagent\n      .put(`${myApi}/${id}`)\n      .send({\n        inventory: cartCount + inventory,\n        cartCount: 0,\n      })\n      .then((res) => {\n        dispatch(PUT_REMOVE(res.body));\n      });\n  };\n\nexport const updateRemoteData = (it) => (dispatch) => {\n  superagent\n    .put(`${myApi}/${it._id}`)\n    .send({\n      inventory: it.inventory - 1,\n      cartCount: it.cartCount + 1,\n    })\n    .then((res) => {\n      dispatch(PUT(res.body));\n    });\n};\nexport const getRemoteData = () => (dispatch) => {\n  superagent.get(myApi).then((res) => {\n    dispatch(GET(res.body));\n  });\n};\nexport default CategorySlice.reducer;\n\nexport const { GET, ACTIVE, PUT, PUT_REMOVE, details } = CategorySlice.actions;\n\n"]},"metadata":{},"sourceType":"module"}