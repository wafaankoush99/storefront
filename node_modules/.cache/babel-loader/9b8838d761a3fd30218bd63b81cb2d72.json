{"ast":null,"code":"// // let initialState = {\n// //   categories: [],\n// //   activeCategory: \"none\",\n// // };\n// // export default (state = initialState, action) => {\n// //   let { type, payload } = action;\n// //   switch (type) {\n// //     case \"GET\":\n// //       let uniqueCat = [];\n// //       for (let category of payload) {\n// //         if (!uniqueCat.includes(category.category)) {\n// //           uniqueCat.push(category.category);\n// //         }\n// //       }\n// //       return {\n// //         categories: [...uniqueCat],\n// //         activeCategory: state.activeCategory,\n// //       };\n// //     case \"ACTIVE\":\n// //       return {\n// //         categories: state.categories,\n// //         activeCategory: payload.normalizedName,\n// //       };\n// //     default:\n// //       return state;\n// //   }\n// // };\n// // export const activeCat = (category) => {\n// //   return {\n// //     type: \"ACTIVE\",\n// //     payload: category,\n// //   };\n// // };\n// import { createSlice } from \"@reduxjs/toolkit\";\n// import superagent from \"superagent\";\n// const myApi = \"https://nihad-api-server.herokuapp.com/product\";\n// const CategorySlice = createSlice({\n//   name: \"Category\",\n//   initialState: {\n//     categories: [],\n//     activeCategory: \"none\",\n//     products: [],\n//     productsList: [],\n//     details: [],\n//     cart: [],\n//   },\n//   reducers: {\n//     GET(state, action) {\n//       for (let category of action.payload) {\n//         if (!state.categories.includes(category.category)) {\n//           state.categories.push(category.category);\n//         }\n//       }\n//       state.products = [];\n//       state.products.push(...action.payload);\n//     },\n//     ACTIVE(state, action) {\n//       state.activeCategory = `${action.payload}`;\n//       let myproducts = [];\n//       state.products.forEach((product) => {\n//         if (product.category === action.payload) {\n//           myproducts.push(product);\n//         }\n//       });\n//       state.productsList = myproducts;\n//     },\n//     PUT(state, action) {\n//       state.cart.push(action.payload);\n//       state.productsList.forEach((product) => {\n//         if (action.payload._id === product._id) {\n//           product.inventoryCount--;\n//           product.cartCount++;\n//         }\n//       });\n//     },\n//     PUT_REMOVE(state, action) {\n//       state.productsList.forEach((product) => {\n//         if (action.payload._id === product._id) {\n//           product.inventoryCount = product.cartCount + product.inventoryCount;\n//           product.cartCount = 0;\n//         }\n//       });\n//       let newCart = state.cart.filter((item) => {\n//         return item.name !== action.payload.name;\n//       });\n//       state.cart = [...newCart];\n//     },\n//     details(state, action) {\n//       let targetedProduct = state.productsList.find((item) => {\n//         return item._id === action.payload;\n//       });\n//       state.details = [];\n//       state.details.push(targetedProduct);\n//     },\n//   },\n// });\n// export const updateRemoteDataAfterDeleteFromCart =\n//   (id, inventoryCount, cartCount) => (dispatch, state) => {\n//     superagent\n//       .put(`${myApi}/${id}`)\n//       .send({\n//         inventoryCount: cartCount + inventoryCount,\n//         cartCount: 0,\n//       })\n//       .then((res) => {\n//         dispatch(PUT_REMOVE(res.body));\n//       });\n//   };\n// export const updateRemoteData = (item) => (dispatch, state) => {\n//   superagent\n//     .put(`${myApi}/${item._id}`)\n//     .send({\n//       inventoryCount: item.inventoryCount - 1,\n//       cartCount: item.cartCount + 1,\n//     })\n//     .then((res) => {\n//       dispatch(PUT(res.body));\n//     });\n// };\n// export const getRemoteData = () => (dispatch, state) => {\n//   superagent.get(myApi).then((res) => {\n//     dispatch(GET(res.body));\n//   });\n// };\n// export default CategorySlice.reducer;\n// export const { GET, ACTIVE, PUT, PUT_REMOVE, details } = CategorySlice.actions;","map":{"version":3,"sources":["/home/wafaa/storefront/src/store/CategoryStore.js"],"names":[],"mappingssourcesContent":["// // let initialState = {\n// //   categories: [],\n// //   activeCategory: \"none\",\n// // };\n\n// // export default (state = initialState, action) => {\n// //   let { type, payload } = action;\n\n// //   switch (type) {\n// //     case \"GET\":\n// //       let uniqueCat = [];\n\n// //       for (let category of payload) {\n// //         if (!uniqueCat.includes(category.category)) {\n// //           uniqueCat.push(category.category);\n// //         }\n// //       }\n// //       return {\n// //         categories: [...uniqueCat],\n// //         activeCategory: state.activeCategory,\n// //       };\n// //     case \"ACTIVE\":\n// //       return {\n// //         categories: state.categories,\n// //         activeCategory: payload.normalizedName,\n// //       };\n\n// //     default:\n// //       return state;\n// //   }\n// // };\n\n// // export const activeCat = (category) => {\n// //   return {\n// //     type: \"ACTIVE\",\n// //     payload: category,\n// //   };\n// // };\n\n\n// import { createSlice } from \"@reduxjs/toolkit\";\n// import superagent from \"superagent\";\n// const myApi = \"https://nihad-api-server.herokuapp.com/product\";\n\n// const CategorySlice = createSlice({\n//   name: \"Category\",\n//   initialState: {\n//     categories: [],\n//     activeCategory: \"none\",\n//     products: [],\n//     productsList: [],\n//     details: [],\n//     cart: [],\n//   },\n//   reducers: {\n//     GET(state, action) {\n//       for (let category of action.payload) {\n//         if (!state.categories.includes(category.category)) {\n//           state.categories.push(category.category);\n//         }\n//       }\n\n//       state.products = [];\n//       state.products.push(...action.payload);\n//     },\n\n//     ACTIVE(state, action) {\n//       state.activeCategory = `${action.payload}`;\n//       let myproducts = [];\n//       state.products.forEach((product) => {\n//         if (product.category === action.payload) {\n//           myproducts.push(product);\n//         }\n//       });\n//       state.productsList = myproducts;\n//     },\n\n//     PUT(state, action) {\n//       state.cart.push(action.payload);\n\n//       state.productsList.forEach((product) => {\n//         if (action.payload._id === product._id) {\n//           product.inventoryCount--;\n//           product.cartCount++;\n//         }\n//       });\n//     },\n\n//     PUT_REMOVE(state, action) {\n//       state.productsList.forEach((product) => {\n//         if (action.payload._id === product._id) {\n//           product.inventoryCount = product.cartCount + product.inventoryCount;\n//           product.cartCount = 0;\n//         }\n//       });\n//       let newCart = state.cart.filter((item) => {\n//         return item.name !== action.payload.name;\n//       });\n//       state.cart = [...newCart];\n//     },\n\n//     details(state, action) {\n//       let targetedProduct = state.productsList.find((item) => {\n//         return item._id === action.payload;\n//       });\n//       state.details = [];\n//       state.details.push(targetedProduct);\n//     },\n//   },\n// });\n\n// export const updateRemoteDataAfterDeleteFromCart =\n//   (id, inventoryCount, cartCount) => (dispatch, state) => {\n//     superagent\n//       .put(`${myApi}/${id}`)\n//       .send({\n//         inventoryCount: cartCount + inventoryCount,\n//         cartCount: 0,\n//       })\n//       .then((res) => {\n//         dispatch(PUT_REMOVE(res.body));\n//       });\n//   };\n\n// export const updateRemoteData = (item) => (dispatch, state) => {\n//   superagent\n//     .put(`${myApi}/${item._id}`)\n//     .send({\n//       inventoryCount: item.inventoryCount - 1,\n//       cartCount: item.cartCount + 1,\n//     })\n//     .then((res) => {\n//       dispatch(PUT(res.body));\n//     });\n// };\n// export const getRemoteData = () => (dispatch, state) => {\n//   superagent.get(myApi).then((res) => {\n//     dispatch(GET(res.body));\n//   });\n// };\n// export default CategorySlice.reducer;\n\n// export const { GET, ACTIVE, PUT, PUT_REMOVE, details } = CategorySlice.actions;"]},"metadata":{},"sourceType":"module"}