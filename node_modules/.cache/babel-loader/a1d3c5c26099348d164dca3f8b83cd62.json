{"ast":null,"code":"// // let initialState = {\n// //   categories: [],\n// //   activeCategory: \"none\",\n// // };\n// // export default (state = initialState, action) => {\n// //   let { type, payload } = action;\n// //   switch (type) {\n// //     case \"GET\":\n// //       let uniqueCat = [];\n// //       for (let category of payload) {\n// //         if (!uniqueCat.includes(category.category)) {\n// //           uniqueCat.push(category.category);\n// //         }\n// //       }\n// //       return {\n// //         categories: [...uniqueCat],\n// //         activeCategory: state.activeCategory,\n// //       };\n// //     case \"ACTIVE\":\n// //       return {\n// //         categories: state.categories,\n// //         activeCategory: payload.normalizedName,\n// //       };\n// //     default:\n// //       return state;\n// //   }\n// // };\n// // export const activeCat = (category) => {\n// //   return {\n// //     type: \"ACTIVE\",\n// //     payload: category,\n// //   };\n// // };\n// import { createSlice } from \"@reduxjs/toolkit\";\n// import superagent from \"superagent\";\n// const myApi = \"https://nihad-api-server.herokuapp.com/product\";\n// const CategorySlice = createSlice({\n//   name: \"Category\",\n//   initialState: {\n//     categories: [],\n//     activeCategory: \"none\",\n//     products: [],\n//     productsList: [],\n//     details: [],\n//     cart: [],\n//   },\n//   reducers: {\n//     GET(state, action) {\n//       for (let category of action.payload) {\n//         if (!state.categories.includes(category.category)) {\n//           state.categories.push(category.category);\n//         }\n//       }\n//       state.products = [];\n//       state.products.push(...action.payload);\n//     },\n//     ACTIVE(state, action) {\n//       state.activeCategory = `${action.payload}`;\n//       let myproducts = [];\n//       state.products.forEach((product) => {\n//         if (product.category === action.payload) {\n//           myproducts.push(product);\n//         }\n//       });\n//       state.productsList = myproducts;\n//     },\n//     PUT(state, action) {\n//       state.cart.push(action.payload);\n//       state.productsList.forEach((product) => {\n//         if (action.payload._id === product._id) {\n//           product.inventoryCount--;\n//           product.cartCount++;\n//         }\n//       });\n//     },\n//     PUT_REMOVE(state, action) {\n//       state.productsList.forEach((product) => {\n//         if (action.payload._id === product._id) {\n//           product.inventoryCount = product.cartCount + product.inventoryCount;\n//           product.cartCount = 0;\n//         }\n//       });\n//       let newCart = state.cart.filter((item) => {\n//         return item.name !== action.payload.name;\n//       });\n//       state.cart = [...newCart];\n//     },\n//     details(state, action) {\n//       let targetedProduct = state.productsList.find((item) => {\n//         return item._id === action.payload;\n//       });\n//       state.details = [];\n//       state.details.push(targetedProduct);\n//     },\n//   },\n// });\n// export const updateRemoteDataAfterDeleteFromCart =\n//   (id, inventoryCount, cartCount) => (dispatch, state) => {\n//     superagent\n//       .put(`${myApi}/${id}`)\n//       .send({\n//         inventoryCount: cartCount + inventoryCount,\n//         cartCount: 0,\n//       })\n//       .then((res) => {\n//         dispatch(PUT_REMOVE(res.body));\n//       });\n//   };\n// export const updateRemoteData = (item) => (dispatch, state) => {\n//   superagent\n//     .put(`${myApi}/${item._id}`)\n//     .send({\n//       inventoryCount: item.inventoryCount - 1,\n//       cartCount: item.cartCount + 1,\n//     })\n//     .then((res) => {\n//       dispatch(PUT(res.body));\n//     });\n// };\n// export const getRemoteData = () => (dispatch, state) => {\n//   superagent.get(myApi).then((res) => {\n//     dispatch(GET(res.body));\n//   });\n// };\n// export default CategorySlice.reducer;\n// export const { GET, ACTIVE, PUT, PUT_REMOVE, details } = CategorySlice.actions;\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport superagent from \"superagent\";\nconst myApi = \"https://api-server-0.herokuapp.com/products\";\nconst CategorySlice = createSlice({\n  name: \"Category\",\n  initialState: {\n    categories: [],\n    activeCategory: \"none\",\n    products: [],\n    productsList: [],\n    details: [],\n    cart: []\n  },\n  reducers: {\n    GET(state, action) {\n      for (let category of action.payload) {\n        if (!state.categories.includes(category.category)) {\n          state.categories.push(category.category);\n        }\n      }\n\n      state.products = [];\n      state.products.push(...action.payload);\n    },\n\n    ACTIVE(state, action) {\n      state.activeCategory = `${action.payload}`;\n      let myproducts = [];\n      state.products.forEach(product => {\n        if (product.category === action.payload) {\n          myproducts.push(product);\n        }\n      });\n      state.productsList = myproducts;\n    },\n\n    PUT(state, action) {\n      state.cart.push(action.payload);\n      state.productsList.forEach(product => {\n        if (action.payload._id === product._id) {\n          product.inventoryCount--;\n          product.cartCount++;\n        }\n      });\n    },\n\n    PUT_REMOVE(state, action) {\n      state.productsList.forEach(product => {\n        if (action.payload._id === product._id) {\n          product.inventoryCount = product.cartCount + product.inventoryCount;\n          product.cartCount = 0;\n        }\n      });\n      let newCart = state.cart.filter(item => {\n        return item.name !== action.payload.name;\n      });\n      state.cart = [...newCart];\n    },\n\n    details(state, action) {\n      let targetedProduct = state.productsList.find(item => {\n        return item._id === action.payload;\n      });\n      state.details = [];\n      state.details.push(targetedProduct);\n    }\n\n  }\n});\nexport const updateRemoteDataAfterDeleteFromCart = (id, inventoryCount, cartCount) => (dispatch, state) => {\n  superagent.put(`${myApi}/${id}`).send({\n    inventoryCount: cartCount + inventoryCount,\n    cartCount: 0\n  }).then(res => {\n    dispatch(PUT_REMOVE(res.body));\n  });\n};\nexport const updateRemoteData = item => (dispatch, state) => {\n  superagent.put(`${myApi}/${item._id}`).send({\n    inventoryCount: item.inventoryCount - 1,\n    cartCount: item.cartCount + 1\n  }).then(res => {\n    dispatch(PUT(res.body));\n  });\n};\nexport const getRemoteData = () => (dispatch, state) => {\n  superagent.get(myApi).then(res => {\n    dispatch(GET(res.body));\n  });\n};\nexport default CategorySlice.reducer;\nexport const {\n  GET,\n  ACTIVE,\n  PUT,\n  PUT_REMOVE,\n  details\n} = CategorySlice.actions;","map":{"version":3,"sources":["/home/wafaa/storefront/src/store/CategoryStore.js"],"names":["createSlice","superagent","myApi","CategorySlice","name","initialState","categories","activeCategory","products","productsList","details","cart","reducers","GET","state","action","category","payload","includes","push","ACTIVE","myproducts","forEach","product","PUT","_id","inventoryCount","cartCount","PUT_REMOVE","newCart","filter","item","targetedProduct","find","updateRemoteDataAfterDeleteFromCart","id","dispatch","put","send","then","res","body","updateRemoteData","getRemoteData","get","reducer","actions"],"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","sourcesContent":["// // let initialState = {\n// //   categories: [],\n// //   activeCategory: \"none\",\n// // };\n\n// // export default (state = initialState, action) => {\n// //   let { type, payload } = action;\n\n// //   switch (type) {\n// //     case \"GET\":\n// //       let uniqueCat = [];\n\n// //       for (let category of payload) {\n// //         if (!uniqueCat.includes(category.category)) {\n// //           uniqueCat.push(category.category);\n// //         }\n// //       }\n// //       return {\n// //         categories: [...uniqueCat],\n// //         activeCategory: state.activeCategory,\n// //       };\n// //     case \"ACTIVE\":\n// //       return {\n// //         categories: state.categories,\n// //         activeCategory: payload.normalizedName,\n// //       };\n\n// //     default:\n// //       return state;\n// //   }\n// // };\n\n// // export const activeCat = (category) => {\n// //   return {\n// //     type: \"ACTIVE\",\n// //     payload: category,\n// //   };\n// // };\n\n\n// import { createSlice } from \"@reduxjs/toolkit\";\n// import superagent from \"superagent\";\n// const myApi = \"https://nihad-api-server.herokuapp.com/product\";\n\n// const CategorySlice = createSlice({\n//   name: \"Category\",\n//   initialState: {\n//     categories: [],\n//     activeCategory: \"none\",\n//     products: [],\n//     productsList: [],\n//     details: [],\n//     cart: [],\n//   },\n//   reducers: {\n//     GET(state, action) {\n//       for (let category of action.payload) {\n//         if (!state.categories.includes(category.category)) {\n//           state.categories.push(category.category);\n//         }\n//       }\n\n//       state.products = [];\n//       state.products.push(...action.payload);\n//     },\n\n//     ACTIVE(state, action) {\n//       state.activeCategory = `${action.payload}`;\n//       let myproducts = [];\n//       state.products.forEach((product) => {\n//         if (product.category === action.payload) {\n//           myproducts.push(product);\n//         }\n//       });\n//       state.productsList = myproducts;\n//     },\n\n//     PUT(state, action) {\n//       state.cart.push(action.payload);\n\n//       state.productsList.forEach((product) => {\n//         if (action.payload._id === product._id) {\n//           product.inventoryCount--;\n//           product.cartCount++;\n//         }\n//       });\n//     },\n\n//     PUT_REMOVE(state, action) {\n//       state.productsList.forEach((product) => {\n//         if (action.payload._id === product._id) {\n//           product.inventoryCount = product.cartCount + product.inventoryCount;\n//           product.cartCount = 0;\n//         }\n//       });\n//       let newCart = state.cart.filter((item) => {\n//         return item.name !== action.payload.name;\n//       });\n//       state.cart = [...newCart];\n//     },\n\n//     details(state, action) {\n//       let targetedProduct = state.productsList.find((item) => {\n//         return item._id === action.payload;\n//       });\n//       state.details = [];\n//       state.details.push(targetedProduct);\n//     },\n//   },\n// });\n\n// export const updateRemoteDataAfterDeleteFromCart =\n//   (id, inventoryCount, cartCount) => (dispatch, state) => {\n//     superagent\n//       .put(`${myApi}/${id}`)\n//       .send({\n//         inventoryCount: cartCount + inventoryCount,\n//         cartCount: 0,\n//       })\n//       .then((res) => {\n//         dispatch(PUT_REMOVE(res.body));\n//       });\n//   };\n\n// export const updateRemoteData = (item) => (dispatch, state) => {\n//   superagent\n//     .put(`${myApi}/${item._id}`)\n//     .send({\n//       inventoryCount: item.inventoryCount - 1,\n//       cartCount: item.cartCount + 1,\n//     })\n//     .then((res) => {\n//       dispatch(PUT(res.body));\n//     });\n// };\n// export const getRemoteData = () => (dispatch, state) => {\n//   superagent.get(myApi).then((res) => {\n//     dispatch(GET(res.body));\n//   });\n// };\n// export default CategorySlice.reducer;\n\n// export const { GET, ACTIVE, PUT, PUT_REMOVE, details } = CategorySlice.actions;\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport superagent from \"superagent\";\nconst myApi = \"https://api-server-0.herokuapp.com/products\";\n\nconst CategorySlice = createSlice({\n  name: \"Category\",\n  initialState: {\n    categories: [],\n    activeCategory: \"none\",\n    products: [],\n    productsList: [],\n    details: [],\n    cart: [],\n  },\n  reducers: {\n    GET(state, action) {\n      for (let category of action.payload) {\n        if (!state.categories.includes(category.category)) {\n          state.categories.push(category.category);\n        }\n      }\n\n      state.products = [];\n      state.products.push(...action.payload);\n    },\n\n    ACTIVE(state, action) {\n      state.activeCategory = `${action.payload}`;\n      let myproducts = [];\n      state.products.forEach((product) => {\n        if (product.category === action.payload) {\n          myproducts.push(product);\n        }\n      });\n      state.productsList = myproducts;\n    },\n\n    PUT(state, action) {\n      state.cart.push(action.payload);\n\n      state.productsList.forEach((product) => {\n        if (action.payload._id === product._id) {\n          product.inventoryCount--;\n          product.cartCount++;\n        }\n      });\n    },\n\n    PUT_REMOVE(state, action) {\n      state.productsList.forEach((product) => {\n        if (action.payload._id === product._id) {\n          product.inventoryCount = product.cartCount + product.inventoryCount;\n          product.cartCount = 0;\n        }\n      });\n      let newCart = state.cart.filter((item) => {\n        return item.name !== action.payload.name;\n      });\n      state.cart = [...newCart];\n    },\n\n    details(state, action) {\n      let targetedProduct = state.productsList.find((item) => {\n        return item._id === action.payload;\n      });\n      state.details = [];\n      state.details.push(targetedProduct);\n    },\n  },\n});\n\nexport const updateRemoteDataAfterDeleteFromCart =\n  (id, inventoryCount, cartCount) => (dispatch, state) => {\n    superagent\n      .put(`${myApi}/${id}`)\n      .send({\n        inventoryCount: cartCount + inventoryCount,\n        cartCount: 0,\n      })\n      .then((res) => {\n        dispatch(PUT_REMOVE(res.body));\n      });\n  };\n\nexport const updateRemoteData = (item) => (dispatch, state) => {\n  superagent\n    .put(`${myApi}/${item._id}`)\n    .send({\n      inventoryCount: item.inventoryCount - 1,\n      cartCount: item.cartCount + 1,\n    })\n    .then((res) => {\n      dispatch(PUT(res.body));\n    });\n};\nexport const getRemoteData = () => (dispatch, state) => {\n  superagent.get(myApi).then((res) => {\n    dispatch(GET(res.body));\n  });\n};\nexport default CategorySlice.reducer;\n\nexport const { GET, ACTIVE, PUT, PUT_REMOVE, details } = CategorySlice.actions;\n\n"]},"metadata":{},"sourceType":"module"}